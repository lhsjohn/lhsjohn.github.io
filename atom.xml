<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lhsjohn的博客</title>
  
  <subtitle>对未来的真正慷慨，是把一切献给现在</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lhsblog.cn/"/>
  <updated>2018-08-17T10:08:08.725Z</updated>
  <id>https://www.lhsblog.cn/</id>
  
  <author>
    <name>lhsjohn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ActiveMQ</title>
    <link href="https://www.lhsblog.cn/2018/08/17/ActiveMQ/"/>
    <id>https://www.lhsblog.cn/2018/08/17/ActiveMQ/</id>
    <published>2018-08-17T07:41:03.000Z</published>
    <updated>2018-08-17T10:08:08.725Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What-is-ActiveMQ&quot;&gt;&lt;a href=&quot;#What-is-ActiveMQ&quot; class=&quot;headerlink&quot; title=&quot;What is ActiveMQ?&quot;&gt;&lt;/a&gt;What is ActiveMQ?&lt;/h1&gt;&lt;p&gt;   ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现,尽管JMS规范出台已经是很久的事情了,但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。&lt;br&gt;主要特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多种语言和协议编写客户端。语言: Java, C, C++, C#, Ruby, Perl, Python, PHP。应用协议: OpenWire,Stomp REST,WS Notification,XMPP,AMQP&lt;/li&gt;
&lt;li&gt;完全支持JMS1.1和J2EE 1.4规范 (持久化,XA消息,事务)&lt;/li&gt;
&lt;li&gt;对Spring的支持,ActiveMQ可以很容易内嵌到使用Spring的系统里面去,而且也支持Spring2.0的特性&lt;/li&gt;
&lt;li&gt;通过了常见J2EE服务器(如 Geronimo,JBoss 4, GlassFish,WebLogic)的测试,其中通过JCA 1.5 resource adaptors的配置,可以让ActiveMQ可以自动的部署到任何兼容J2EE 1.4 商业服务器上&lt;/li&gt;
&lt;li&gt;支持多种传送协议:in-VM,TCP,SSL,NIO,UDP,JGroups,JXTA&lt;/li&gt;
&lt;li&gt;支持通过JDBC和journal提供高速的消息持久化&lt;/li&gt;
&lt;li&gt;从设计上保证了高性能的集群,客户端-服务器,点对点&lt;/li&gt;
&lt;li&gt;支持Ajax&lt;/li&gt;
&lt;li&gt;支持与Axis的整合&lt;/li&gt;
&lt;li&gt;可以很容易得调用内嵌JMS provider,进行测试&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;ActiveMQ的消息形式&quot;&gt;&lt;a href=&quot;#ActiveMQ的消息形式&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ的消息形式&quot;&gt;&lt;/a&gt;ActiveMQ的消息形式&lt;/h1&gt;&lt;p&gt;对于消息的传递有两种类型：&lt;/p&gt;
&lt;p&gt;一种是点对点的，即一个生产者和一个消费者一一对应；&lt;/p&gt;
&lt;p&gt;另一种是发布/订阅模式，即一个生产者产生消息并进行发送后，可以由多个消费者进行接收。&lt;/p&gt;
&lt;p&gt;JMS定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收以一些不同形式的数据，提供现有消息格式的一些级别的兼容性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;　　· StreamMessage – Java原始值的数据流&lt;/li&gt;
&lt;li&gt;　　· MapMessage–一套名称-值对&lt;/li&gt;
&lt;li&gt;　　· TextMessage–一个字符串对象&lt;/li&gt;
&lt;li&gt;　　· ObjectMessage–一个序列化的 Java对象&lt;/li&gt;
&lt;li&gt;　　· BytesMessage–一个字节的数据流&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; &lt;img src=&quot;/images/2018-08-17.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ActiveMQ" scheme="https://www.lhsblog.cn/categories/ActiveMQ/"/>
    
    
      <category term="java" scheme="https://www.lhsblog.cn/tags/java/"/>
    
      <category term="ActiveMQ" scheme="https://www.lhsblog.cn/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>SolrCloud，一个分布式搜索方案</title>
    <link href="https://www.lhsblog.cn/2018/08/14/SolrCloud%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E6%96%B9%E6%A1%88/"/>
    <id>https://www.lhsblog.cn/2018/08/14/SolrCloud，一个分布式搜索方案/</id>
    <published>2018-08-14T15:17:16.000Z</published>
    <updated>2018-08-17T10:09:11.202Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近搞分布式搜索服务的实现，一直受到性能的瓶颈制约，单机版的solr服务对于少数用户体验还可以，但是涉及到几千的并发的时候，难免会造成性能的突然下降。&lt;/p&gt;
&lt;p&gt;下面是一套利用solr和zookeeper实现的分布式搜索架构方案&lt;/p&gt;
&lt;h1 id=&quot;Solr集群的系统架构&quot;&gt;&lt;a href=&quot;#Solr集群的系统架构&quot; class=&quot;headerlink&quot; title=&quot;Solr集群的系统架构&quot;&gt;&lt;/a&gt;Solr集群的系统架构&lt;/h1&gt;&lt;p&gt; &lt;img src=&quot;/images/2018-08-14-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 三个Solr实例（ 每个实例包括两个Core），组成一个SolrCloud。&lt;/p&gt;
&lt;p&gt; 索引集合包括两个Shard（shard1和shard2），shard1和shard2分别由三个Core组成，其中一个Leader两个Replication，Leader是由zookeeper选举产生，zookeeper控制每个shard上三个Core的索引数据一致，解决高可用问题。&lt;br&gt;用户发起索引请求分别从shard1和shard2上获取，解决高并发问题。&lt;/p&gt;
&lt;p&gt;Collection在SolrCloud集群中是一个逻辑意义上的完整的索引结构。它常常被划分为一个或多个Shard（分片），它们使用相同的配置信息。&lt;br&gt;比如：针对商品信息搜索可以创建一个collection。&lt;br&gt; collection=shard1+shard2+….+shardX&lt;/p&gt;
&lt;p&gt; 每个Core是Solr中一个独立运行单位，提供 索引和搜索服务。一个shard需要由一个Core或多个Core组成。由于collection由多个shard组成所以collection一般由多个core组成。&lt;/p&gt;
&lt;p&gt; Master是master-slave结构中的主结点（通常说主服务器），Slave是master-slave结构中的从结点（通常说从服务器或备服务器）。同一个Shard下master和slave存储的数据是一致的，这是为了达到高可用目的。&lt;/p&gt;
&lt;p&gt; Collection的逻辑分片。每个Shard被化成一个或者多个replication，通过选举确定哪个是Leader。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.lhsblog.cn/tags/java/"/>
    
      <category term="solr+zookeeper" scheme="https://www.lhsblog.cn/tags/solr-zookeeper/"/>
    
      <category term="linux" scheme="https://www.lhsblog.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs</title>
    <link href="https://www.lhsblog.cn/2018/08/11/fastdfs/"/>
    <id>https://www.lhsblog.cn/2018/08/11/fastdfs/</id>
    <published>2018-08-11T03:17:16.000Z</published>
    <updated>2018-08-17T10:08:27.498Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;FastDFS是C语言开发，建议在linux上运行，下面使用Centos6.4作为安装环境。&lt;br&gt;安装FastDFS需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc：yum install gcc-c++&lt;/p&gt;
&lt;h2 id=&quot;安装libevent&quot;&gt;&lt;a href=&quot;#安装libevent&quot; class=&quot;headerlink&quot; title=&quot;安装libevent&quot;&gt;&lt;/a&gt;安装libevent&lt;/h2&gt;&lt;p&gt;FastDFS依赖libevent库，需要安装：&lt;/p&gt;
&lt;p&gt;yum -y install libevent&lt;/p&gt;
&lt;h2 id=&quot;安装libfastcommon&quot;&gt;&lt;a href=&quot;#安装libfastcommon&quot; class=&quot;headerlink&quot; title=&quot;安装libfastcommon&quot;&gt;&lt;/a&gt;安装libfastcommon&lt;/h2&gt;&lt;p&gt;libfastcommon是FastDFS官方提供的，libfastcommon包含了FastDFS运行所需要的一些基础库。&lt;br&gt;将libfastcommonV1.0.7.tar.gz拷贝至/usr/local/下&lt;/p&gt;
&lt;p&gt;cd /usr/local&lt;/p&gt;
&lt;p&gt;tar -zxvf  libfastcommonV1.0.7.tar.gz&lt;/p&gt;
&lt;p&gt;cd libfastcommon-1.0.7&lt;br&gt;./make.sh&lt;/p&gt;
&lt;p&gt;./make.sh install&lt;/p&gt;
&lt;p&gt;注意：libfastcommon安装好后会自动将库文件拷贝至/usr/lib64下，由于FastDFS程序引用usr/lib目录所以需要将/usr/lib64下的库文件拷贝至/usr/lib下。&lt;/p&gt;
&lt;h2 id=&quot;tracker编译安装&quot;&gt;&lt;a href=&quot;#tracker编译安装&quot; class=&quot;headerlink&quot; title=&quot;tracker编译安装&quot;&gt;&lt;/a&gt;tracker编译安装&lt;/h2&gt;&lt;p&gt;将FastDFS_v5.05.tar.gz拷贝至/usr/local/下&lt;/p&gt;
&lt;p&gt;tar -zxvf FastDFS_v5.05.tar.gz&lt;/p&gt;
&lt;p&gt;cd FastDFS&lt;/p&gt;
&lt;p&gt;./make.sh&lt;/p&gt;
&lt;p&gt;./make.sh install&lt;/p&gt;
&lt;p&gt;安装成功将安装目录下的conf下的文件拷贝到/etc/fdfs/下。&lt;/p&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;安装成功后进入/etc/fdfs目录：&lt;br&gt;拷贝一份新的tracker配置文件：&lt;/p&gt;
&lt;p&gt;cp tracker.conf.sample tracker.conf&lt;/p&gt;
&lt;p&gt;修改tracker.conf&lt;br&gt;vi tracker.conf&lt;br&gt;base_path=/home/yuqing/FastDFS&lt;br&gt;改为：&lt;br&gt;base_path=/home/FastDFS&lt;/p&gt;
&lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;p&gt;/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart&lt;br&gt;启动的日志显示先停止5619进程（实际环境不是5619）&lt;/p&gt;
&lt;h2 id=&quot;设置开机启动&quot;&gt;&lt;a href=&quot;#设置开机启动&quot; class=&quot;headerlink&quot; title=&quot;设置开机启动&quot;&gt;&lt;/a&gt;设置开机启动&lt;/h2&gt;
    
    </summary>
    
      <category term="fastdfs" scheme="https://www.lhsblog.cn/categories/fastdfs/"/>
    
    
      <category term="java" scheme="https://www.lhsblog.cn/tags/java/"/>
    
      <category term="linux" scheme="https://www.lhsblog.cn/tags/linux/"/>
    
      <category term="fastdfs" scheme="https://www.lhsblog.cn/tags/fastdfs/"/>
    
  </entry>
  
  <entry>
    <title>Pom文件</title>
    <link href="https://www.lhsblog.cn/2018/08/08/Pom%E6%96%87%E4%BB%B6/"/>
    <id>https://www.lhsblog.cn/2018/08/08/Pom文件/</id>
    <published>2018-08-08T03:45:16.000Z</published>
    <updated>2018-08-17T10:08:59.561Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight dust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Spring" scheme="https://www.lhsblog.cn/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.lhsblog.cn/tags/Spring/"/>
    
      <category term="java" scheme="https://www.lhsblog.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式思考(四)-----单件模式</title>
    <link href="https://www.lhsblog.cn/2018/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%9D%E8%80%83(%E5%9B%9B)-----%E5%8D%95%E4%BB%B6%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.lhsblog.cn/2018/08/07/设计模式思考(四)-----单件模式/</id>
    <published>2018-08-07T09:40:24.000Z</published>
    <updated>2018-08-17T10:10:24.095Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单件模式的定义&quot;&gt;&lt;a href=&quot;#单件模式的定义&quot; class=&quot;headerlink&quot; title=&quot;单件模式的定义&quot;&gt;&lt;/a&gt;单件模式的定义&lt;/h1&gt;&lt;p&gt;确保一个类只有一个实例，并提供一个全局访问点。&lt;/p&gt;
&lt;h1 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/2018-08-07-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1.其中uniqueInstance 变量持有唯一的单间实例&lt;/p&gt;
&lt;p&gt;2.getInstance()方法是静态的，这意味着它是一个类方法，所以可以在代码的任何地方使用Singleton.getnstance()访问它。这样和访问全局变量一样，只是多了一个优点：单件可以延迟实例化。&lt;/p&gt;
&lt;p&gt;3.单件模式的类也可以是一般的类，具有一般的数据和方法。&lt;/p&gt;
&lt;p&gt;下面是一个单件模式的经典实现：&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/"/>
    
      <category term="学习" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java" scheme="https://www.lhsblog.cn/tags/java/"/>
    
      <category term="设计模式" scheme="https://www.lhsblog.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>一道算法题</title>
    <link href="https://www.lhsblog.cn/2018/08/06/%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>https://www.lhsblog.cn/2018/08/06/一道算法题/</id>
    <published>2018-08-06T08:59:01.000Z</published>
    <updated>2018-08-06T09:01:02.079Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;算法题:请用js根据网站用户的内裤颜色调改变网站主题文字颜色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018-08-06-2.jpg&quot;
        
      
    
    </summary>
    
      <category term="段子" scheme="https://www.lhsblog.cn/categories/%E6%AE%B5%E5%AD%90/"/>
    
    
      <category term="段子" scheme="https://www.lhsblog.cn/tags/%E6%AE%B5%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>threadqiushi.py</title>
    <link href="https://www.lhsblog.cn/2018/08/06/threadqiushi.py/"/>
    <id>https://www.lhsblog.cn/2018/08/06/threadqiushi.py/</id>
    <published>2018-08-05T16:36:03.000Z</published>
    <updated>2018-08-17T10:09:26.365Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="爬虫" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/python/"/>
    
      <category term="学习" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/python/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://www.lhsblog.cn/tags/python/"/>
    
      <category term="爬虫" scheme="https://www.lhsblog.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="多线程" scheme="https://www.lhsblog.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>生活带有主观性  —— 二刷《当幸福来敲门》</title>
    <link href="https://www.lhsblog.cn/2018/08/05/%E7%94%9F%E6%B4%BB%E5%B8%A6%E6%9C%89%E4%B8%BB%E8%A7%82%E6%80%A7%E4%BA%8C%E5%88%B7%E3%80%8A%E5%BD%93%E5%B9%B8%E7%A6%8F%E6%9D%A5%E6%95%B2%E9%97%A8%E3%80%8B/"/>
    <id>https://www.lhsblog.cn/2018/08/05/生活带有主观性二刷《当幸福来敲门》/</id>
    <published>2018-08-05T10:31:09.000Z</published>
    <updated>2018-08-17T10:10:41.263Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;“黑夜给了我黑色的眼睛，我却用它寻找光明”。这是顾城的一句经典语录，如果可以的话，我想把这个经典语录赋予给这个拥有灵魂的电影。&lt;/p&gt;
&lt;p&gt;这部电影带给你最大的震撼或许就是，不同的成长阶段，你对他的感受会有所不同吧。&lt;/p&gt;
&lt;p&gt;第一次观看这部电影大概是在三年前，高二的时候。应试型的教育形式一遍又一遍的在你身边重复显现，或许就真的变成了考试的机器一般，学习与考试，你的时间完全不在你手上，做不了自己喜欢的事情，成绩再好也毫无意义。&lt;/p&gt;
&lt;p&gt;也就在这个状态之下，我观看了这么一部电影。&lt;br&gt;这或许也是看到开头就能知道故事结局的一部电影，但是它确实有足够的魅力来吸引人们去观看它，去思考我们眼睛看不到的地方。&lt;/p&gt;
&lt;p&gt;“克里斯·加德纳，生活在旧金山的黑人男青年，靠做推销员养着老婆还有幼子。克里斯从没觉得日子过得很幸福，当然也没很痛苦，就跟美国千千万普通男人一样过着平淡的生活，直到有一天，一系列突如其来的变故才让克里斯知道，原来平淡的日子有多珍贵。&lt;/p&gt;
&lt;p&gt;首先，他丢了工作，公司裁员让他丢了饭碗。克里斯从此遭遇了一连串重大打击，妻子因忍受不了长期的贫困生活愤而出走，连六岁大的儿子（杰登·史密斯）也一同带走。没过多久，妻子又把儿子还给了克里斯，从此克里斯不仅要面对失业的困境，还要独立抚养儿子。没过多久，克里斯因长期欠交房租被房东赶出家门，带着儿子流落街头。在接下的两三年中，这对苦命父子的住所从纸皮箱搬到公共卫生间。克里斯坚强面对困境时刻打散工赚钱，同时也努力培养孩子乐观面对困境的精神，父子俩日子虽苦，但还是能快乐生活。&lt;br&gt;一次，克里斯在停车场遇见一个开高级跑车的男人，克里斯问他做什么工作才能过上这样的生活，那男人告诉他自己是做股票经纪人的，克里斯从此就决定自己要做一个出色的股票经纪人，和儿子过上好日子。完全没有股票知识的克里斯靠着毅力在华尔街一家股票公司当上学徒，头脑灵活的他很快就掌握了股票市场的知识，随后开上了自己的股票经纪公司，最后成为百万富翁。&lt;br&gt;一路上克里斯经历了不少挫折，但是年幼的儿子每次都能给予他最大的鼓励，两父子相互扶持最终完成了又一个美国梦。”&lt;/p&gt;
&lt;p&gt;克里斯是幸运的的也是不幸运的。&lt;/p&gt;
&lt;p&gt;他的不幸运来源于他之前的穷困潦倒，虽然这部电影并没有给我们介绍他之前的背景，我们也就无法得知他现在处境的原因，电影的开头只是给我们说明了确实有这么一个处境，至于其他的部分，就由你来想吧!&lt;/p&gt;
&lt;p&gt;或许是他年轻时候的不努力也或者是他年轻时因为某些变故造成的自己与机会的远离。但是在那个年代，机会似乎也没有那么多。&lt;/p&gt;
&lt;p&gt;高二的时候看这部影片，确实是一部实实在在的励志电影，一个人靠着自己坚定的意志力和常人难以接受的决定来改变自己的人生。给我当时增加了不少的动力，这些动力，来源于他的勇敢。&lt;/p&gt;
&lt;p&gt;成功一帆风顺固然很好，但是如果你走的道路太顺利了，只能说明这条路很多人和你一样走过。&lt;/p&gt;
&lt;p&gt;克里斯是一个真正的爷们，他的刚强，并不是一些人眼中所说的身强体壮，而是他重重的责任感以及永不抱怨的精神。&lt;br&gt;即便在最为穷困的时候，也给自己孩子买了心爱的生日礼物，带着孩子吃甜点而自己也只是在旁边看着，妻子离她而去，自己也毅然而然扛起了生活的重担。&lt;br&gt;看电影的时候都会为他感到着急，为什么运气会那么差，“屋漏偏逢天阴雨”，又看到屏幕上的一个个的弹幕，有庆幸自己成功的，也有刚失败激励自己重头再来的，只能说是，事态纷杂，每个人的经历都不一样，获得真正意义上的成功，又有几个呢？&lt;/p&gt;
&lt;p&gt;他的幸运是让他在人生最为低谷的时候抓住了机会，我们看到的，机会不是别人送来的，是他自己争取来的，有他的努力，当然与他与人坦诚相处的态度也是分不开的。&lt;/p&gt;
&lt;p&gt;今天又把这部电影看了一遍，思考的角度与当年却有些不同。&lt;/p&gt;
&lt;p&gt;现在，我觉得克里斯是不幸的。&lt;/p&gt;
&lt;p&gt;首先是对于成功的定义，我觉得这是一部被资本化了的电影，首先故事的背景就是发生在资本化的美国，人们以金钱来衡量自己的财富，作为判断自己的人生成败的重要标准。&lt;/p&gt;
&lt;p&gt;这种价值观，太过于“唯物”。&lt;/p&gt;
&lt;p&gt;也许大家沉浸于他的改变中无所自拔，想象着这大概就是生活最为美好的情况。&lt;br&gt;
    
    </summary>
    
      <category term="观后感" scheme="https://www.lhsblog.cn/categories/%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    
    
      <category term="杂谈" scheme="https://www.lhsblog.cn/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="影评" scheme="https://www.lhsblog.cn/tags/%E5%BD%B1%E8%AF%84/"/>
    
      <category term="励志" scheme="https://www.lhsblog.cn/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>ez_setup.py</title>
    <link href="https://www.lhsblog.cn/2018/08/04/ez_setup.py/"/>
    <id>https://www.lhsblog.cn/2018/08/04/ez_setup.py/</id>
    <published>2018-08-04T03:37:03.000Z</published>
    <updated>2018-08-17T10:08:19.007Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="爬虫" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/python/"/>
    
      <category term="学习" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/python/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="https://www.lhsblog.cn/tags/python/"/>
    
      <category term="爬虫" scheme="https://www.lhsblog.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>设计模式思考(三)装饰者模式</title>
    <link href="https://www.lhsblog.cn/2018/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%9D%E8%80%83(%E4%B8%89)-----%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.lhsblog.cn/2018/08/02/设计模式思考(三)-----装饰者模式/</id>
    <published>2018-08-02T14:09:03.000Z</published>
    <updated>2018-08-17T10:10:15.862Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;装饰者模式的定义&quot;&gt;&lt;a href=&quot;#装饰者模式的定义&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式的定义&quot;&gt;&lt;/a&gt;装饰者模式的定义&lt;/h1&gt;&lt;p&gt;装饰者模式动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。&lt;/p&gt;
&lt;p&gt;可以这么说：“装饰者模式给爱用继承的人一个全新的眼界”&lt;/p&gt;
&lt;p&gt;下面来看一个装饰者模式的使用案例&lt;/p&gt;
&lt;p&gt;对于一家咖啡店的订单系统，起初所有种类咖啡的类都是继承自饮料类的(Beverage),其中饮料类是一个抽象的类，内有description的实例变量，用来描述所做的饮料，有cost()方法来返回价钱。&lt;/p&gt;
&lt;p&gt;但是我们都知道，咖啡的种类有很多很多种，加入的调料也不尽相同，比如说我们可以定制摩卡咖啡，奶泡咖啡等，且这些调料的价钱也是不尽相同的，或许我们最初想法是再将咖啡的种类根据调料来进行划分，派生出更多的子类出来，但是这种做法是不明智的，咖啡的种类有成千上百种，调料也有成千上百种，照这个思想进行下去的话，岂不是要派生出一大堆类出来，这对于系统的维护来说也将是一个棘手的事情。&lt;/p&gt;
&lt;p&gt;那么，有没有其他的解决方案呢？&lt;/p&gt;
&lt;p&gt;答案是肯定的，在这里就是需要用到一个经典的设计模式——装饰者模式。&lt;/p&gt;
&lt;p&gt;在这个例子中，我们要以饮料为主体，然后在运行时以调料来装饰饮料。举个栗子，如果顾客想要一杯摩卡和奶泡深焙咖啡，我们要做的事情有&lt;/p&gt;
&lt;p&gt;1.拿一个深焙咖啡(DarkRoast)对象&lt;/p&gt;
&lt;p&gt;2.以摩卡(Mocha)对象装饰它&lt;/p&gt;
&lt;p&gt;3.以奶泡(Whip)对象装饰它&lt;/p&gt;
&lt;p&gt;4.调用cost()方法，并依赖委托将调料的价钱加上去&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/"/>
    
      <category term="学习" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java" scheme="https://www.lhsblog.cn/tags/java/"/>
    
      <category term="设计模式" scheme="https://www.lhsblog.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>urllib2爬虫初级 (二)</title>
    <link href="https://www.lhsblog.cn/2018/08/01/urllib2%E7%88%AC%E8%99%AB%E5%88%9D%E7%BA%A7(%E4%BA%8C%EF%BC%89/"/>
    <id>https://www.lhsblog.cn/2018/08/01/urllib2爬虫初级(二）/</id>
    <published>2018-08-01T09:05:21.000Z</published>
    <updated>2018-08-17T10:09:33.111Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;昨天用urllib模拟GET请求爬取了百度贴吧的一些内容，&lt;br&gt;但是现在网络上还有很多数据是通过POST请求获得的，更复杂的情况&lt;br&gt;是你要面临着如ajax的一些动态加载的数据，你所要获取的数据不能仅仅限于你在浏览器网页里看到的数据，所以在这里有几个处理的方法。&lt;/p&gt;
&lt;h1 id=&quot;POST请求发送&quot;&gt;&lt;a href=&quot;#POST请求发送&quot; class=&quot;headerlink&quot; title=&quot;POST请求发送&quot;&gt;&lt;/a&gt;POST请求发送&lt;/h1&gt;&lt;p&gt;Request请求对象的里有data参数，它就是用在POST里的，我们要传送的数据就是这个参数data，data是一个字典，里面要匹配键值对&lt;/p&gt;
&lt;p&gt;下面是流行的一个比较火的学习案例，通过POST请求模拟有道词典的翻译(之所以选择有道词典，是因为有些翻译词典发起的请求是GET的，这就很狗血了)&lt;/p&gt;
&lt;p&gt;首先开启了我Chrome浏览器中的代理插件，要模仿有道词典翻译的工作我们需要得到有关的url以及data数据&lt;/p&gt;
&lt;p&gt;这些数据的获取是我们通过抓包获取的&lt;/p&gt;
&lt;p&gt;之前的博客写过我现在用的是Fiddler 来抓包的，功能还算比较强大用起来还是挺舒服的。&lt;/p&gt;
&lt;p&gt;输入“我爱python” 的文字进行翻译，点击翻译按钮来发起一个请求，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018-08-01-1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/python/"/>
    
    
      <category term="python" scheme="https://www.lhsblog.cn/tags/python/"/>
    
      <category term="爬虫" scheme="https://www.lhsblog.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>设计模式思考(二)观察者模式</title>
    <link href="https://www.lhsblog.cn/2018/07/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%9D%E8%80%83(%E4%BA%8C)-----%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.lhsblog.cn/2018/07/31/设计模式思考(二)-----观察者模式/</id>
    <published>2018-07-31T15:55:21.000Z</published>
    <updated>2018-08-17T10:10:08.797Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;观察者模式的定义：&quot;&gt;&lt;a href=&quot;#观察者模式的定义：&quot; class=&quot;headerlink&quot; title=&quot;观察者模式的定义：&quot;&gt;&lt;/a&gt;观察者模式的定义：&lt;/h1&gt;&lt;p&gt; 观察者模式定义了对象的一对多依赖，这样一来，让一个对象改变状态时，它的所有依赖者都会收到通知并且会自动更新。&lt;/p&gt;
&lt;h1 id=&quot;观察者模式的实例：&quot;&gt;&lt;a href=&quot;#观察者模式的实例：&quot; class=&quot;headerlink&quot; title=&quot;观察者模式的实例：&quot;&gt;&lt;/a&gt;观察者模式的实例：&lt;/h1&gt;&lt;p&gt; 实例：建立一个气象站应用，利用WeatherData对象取得数据，并更新三个布告板：当前状况、气象统计和天气预报，当WeatherObject对象获得最新的测量数据时，三种布告板必须实时更新。&lt;/p&gt;
&lt;p&gt; 其实观察者模式可以从订报的角度来理解。&lt;br&gt;  拿报纸的订阅来举例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;报社的业务就是出版报纸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;向某家报社订阅了报纸，只要他们有心得报纸出版，就会给你 送过来。只要你是他们的订户，你就会一直收到新报纸。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当你不再看报纸的时候，取消订阅，他们就不会再送报纸过来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只要报社还在运营，就会一直有人向他们订阅报纸或者取消订阅报纸。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;定义观察者模式，类图&quot;&gt;&lt;a href=&quot;#定义观察者模式，类图&quot; class=&quot;headerlink&quot; title=&quot;定义观察者模式，类图&quot;&gt;&lt;/a&gt;定义观察者模式，类图&lt;/h1&gt;&lt;p&gt; &lt;img src=&quot;/images/2018-07-31-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 任何时候我们都可以增加新的观察者，因为主题唯一依赖的东西是一个实现了Observer接口的对象列表。所以我们可以随时增加观察者。事实上，在运行时我们可以用新的观察者取代现有的观察者，主题不会受到任何影响。同样的也可以在任何时候删除某些观察者。&lt;/p&gt;
&lt;p&gt; 有新类型的观察者出现时，主题的代码不需要修改。加入我们有个新的具体类需要当观察者，我们不需要为了兼容新类型而修改主题的代码，所有要做的就是在新的类里实现此观察者接口，然后注册为观察者即可。主题不在乎别的，它只会发送通知给所有实现了观察者接口的对象。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/"/>
    
      <category term="学习" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java" scheme="https://www.lhsblog.cn/tags/java/"/>
    
      <category term="设计模式" scheme="https://www.lhsblog.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>urllib2爬虫初级 (一)</title>
    <link href="https://www.lhsblog.cn/2018/07/31/urllib2%E7%88%AC%E8%99%AB%E5%88%9D%E7%BA%A7/"/>
    <id>https://www.lhsblog.cn/2018/07/31/urllib2爬虫初级/</id>
    <published>2018-07-30T18:27:21.000Z</published>
    <updated>2018-08-17T10:09:45.727Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近由于项目需要，难得需要获取网络上的一些数据，手动获取的话效率又太低，所以最近想要接触一下爬虫。&lt;br&gt;因为有一小部分java开发的经验，所以入门python并不是特别困难，大概看了半天的官方文档后，决定采用python爬虫来获取相关的数据。&lt;/p&gt;
&lt;p&gt;python 现在已经有了几个比较成熟的爬虫框架，如scrapy等，由于刚开始接触python以及python爬虫，我决定从比较底层的urllib2 入手。&lt;/p&gt;
&lt;p&gt;爬虫，简单说来就是通过程序模拟浏览器请求站点的行为，把站点返回的HTML代码/JSON数据/二进制数据（图片、视频） 爬到本地，进而提取自己需要的数据，存放起来使用。&lt;/p&gt;
&lt;p&gt;我使用爬虫的目的很简单，就是获取数据。&lt;/p&gt;
&lt;p&gt;爬虫的一般流程为&lt;br&gt;1.发起请求 也就是模仿浏览器，发送一个Request，一般包含请求头和请求体的部分。&lt;br&gt;2.获取响应的内容&lt;br&gt;3.解析内容&lt;br&gt;4.保存数据(可以存在mysql这种关系型数据库中，但现在非常火的分布式爬虫经常使用redis、mogodb等非关系型数据库，极大提高了数据处理的性能)&lt;/p&gt;
&lt;p&gt;同时推荐一个比较好用的抓包工具Fiddler&lt;/p&gt;
&lt;p&gt;还有谷歌的代理请求插件Proxy SwitchyOmega&lt;/p&gt;
&lt;p&gt;初级练习爬虫的话基本上都是结合着这两个工具来的&lt;/p&gt;
&lt;p&gt;然后自己就跟着做了一个用url2初级爬虫的练习，可以爬取百度贴吧的一些信息，并保存下来为html文件&lt;br&gt;（刚开始入门，并没有考虑到反 反爬虫）&lt;/p&gt;
&lt;p&gt;下面安利一波代码&lt;br&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="https://www.lhsblog.cn/categories/%E7%88%AC%E8%99%AB/python/"/>
    
    
      <category term="python" scheme="https://www.lhsblog.cn/tags/python/"/>
    
      <category term="爬虫" scheme="https://www.lhsblog.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>设计模式思考(一)策略模式</title>
    <link href="https://www.lhsblog.cn/2018/07/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%9D%E8%80%83(%E4%B8%80)-----%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(1)/"/>
    <id>https://www.lhsblog.cn/2018/07/30/设计模式思考(一)-----策略模式(1)/</id>
    <published>2018-07-30T15:08:21.000Z</published>
    <updated>2018-08-17T10:10:33.152Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;策略模式的定义：&quot;&gt;&lt;a href=&quot;#策略模式的定义：&quot; class=&quot;headerlink&quot; title=&quot;策略模式的定义：&quot;&gt;&lt;/a&gt;策略模式的定义：&lt;/h1&gt;&lt;p&gt;策略模式定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。&lt;/p&gt;
&lt;h2 id=&quot;OO基础&quot;&gt;&lt;a href=&quot;#OO基础&quot; class=&quot;headerlink&quot; title=&quot;OO基础&quot;&gt;&lt;/a&gt;OO基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;抽象&lt;/li&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;li&gt;多态&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OO原则&quot;&gt;&lt;a href=&quot;#OO原则&quot; class=&quot;headerlink&quot; title=&quot;OO原则&quot;&gt;&lt;/a&gt;OO原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;封装变化&lt;/li&gt;
&lt;li&gt;多用组合，少用继承&lt;/li&gt;
&lt;li&gt;针对接口编程，不针对实现编程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OO模式&quot;&gt;&lt;a href=&quot;#OO模式&quot; class=&quot;headerlink&quot; title=&quot;OO模式&quot;&gt;&lt;/a&gt;OO模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本篇介绍的是策略模式
    
    </summary>
    
      <category term="设计模式" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/"/>
    
      <category term="学习" scheme="https://www.lhsblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java" scheme="https://www.lhsblog.cn/tags/java/"/>
    
      <category term="设计模式" scheme="https://www.lhsblog.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《西虹市首富》--爆笑与浪漫的融合体</title>
    <link href="https://www.lhsblog.cn/2018/07/29/%E3%80%8A%E8%A5%BF%E8%99%B9%E5%B8%82%E9%A6%96%E5%AF%8C%E3%80%8B---%E7%88%86%E7%AC%91%E4%B8%8E%E6%B5%AA%E6%BC%AB%E7%9A%84%E8%9E%8D%E5%90%88%E4%BD%93/"/>
    <id>https://www.lhsblog.cn/2018/07/29/《西虹市首富》---爆笑与浪漫的融合体/</id>
    <published>2018-07-29T10:39:09.000Z</published>
    <updated>2018-07-29T11:06:11.476Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在家闲着无聊，无意之间看到了手机上推荐的最近比较火的电影《西虹市首富》。&lt;br&gt;西红柿首付？&lt;br&gt;听起来谐音就挺搞笑，潜意识感觉应该挺不错的一部电影。&lt;/p&gt;
&lt;p&gt;“可以去看看，颇具沈腾风格的一部电影。”朋友曾这么给我推荐过。&lt;/p&gt;
&lt;p&gt;确实啊，在家也确实无聊，虽然
        
      
    
    </summary>
    
      <category term="观后感" scheme="https://www.lhsblog.cn/categories/%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    
    
      <category term="杂谈" scheme="https://www.lhsblog.cn/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="影评" scheme="https://www.lhsblog.cn/tags/%E5%BD%B1%E8%AF%84/"/>
    
      <category term="喜剧" scheme="https://www.lhsblog.cn/tags/%E5%96%9C%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>Windows下Eclipse搭建python环境</title>
    <link href="https://www.lhsblog.cn/2018/07/29/Windows%E4%B8%8BEclipse%E6%90%AD%E5%BB%BApython%E7%8E%AF%E5%A2%83/"/>
    <id>https://www.lhsblog.cn/2018/07/29/Windows下Eclipse搭建python环境/</id>
    <published>2018-07-29T03:34:09.000Z</published>
    <updated>2018-08-01T10:10:18.797Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在Eclipse上安装和搭建Python开发环境需要以下五步完成：&lt;/p&gt;
&lt;p&gt;1.下载最新的Eclipse安装包,我是基于Python版本python-3.6.4。python-3.6.4要求的Eclipse高版本，我选择了最新的Eclipse版本：eclipse-ja
        
      
    
    </summary>
    
      <category term="Diary" scheme="https://www.lhsblog.cn/categories/Diary/"/>
    
    
      <category term="心得" scheme="https://www.lhsblog.cn/tags/%E5%BF%83%E5%BE%97/"/>
    
      <category term="技术" scheme="https://www.lhsblog.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python环境搭建" scheme="https://www.lhsblog.cn/tags/Python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="python" scheme="https://www.lhsblog.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>青春</title>
    <link href="https://www.lhsblog.cn/2018/07/28/%E9%9D%92%E6%98%A5/"/>
    <id>https://www.lhsblog.cn/2018/07/28/青春/</id>
    <published>2018-07-28T15:47:01.000Z</published>
    <updated>2018-07-28T15:57:59.599Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;
        
      
    
    </summary>
    
      <category term="随笔" scheme="https://www.lhsblog.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="杂文" scheme="https://www.lhsblog.cn/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>开始学习vue.js了</title>
    <link href="https://www.lhsblog.cn/2018/07/28/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84vue%E4%B9%8B%E6%97%85/"/>
    <id>https://www.lhsblog.cn/2018/07/28/开启我的vue之旅/</id>
    <published>2018-07-28T10:51:01.000Z</published>
    <updated>2018-07-28T10:56:43.736Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;作为一个刚放暑假的大二技术小白，在家也只是无聊的刷刷手机看看电视等。&lt;/p&gt;
&lt;p&gt;一天天的生活确实循环枯燥。&lt;/p&gt;
&lt;p&gt;不如学习&lt;/p&gt;
&lt;p&gt;早就听说了vue的强大之处，虽然还不怎么流行但自己也早就想去仔细的研究一番&lt;br&gt;那么这个暑假便是一个很好的机会去接触它了解
        
      
    
    </summary>
    
      <category term="Diary" scheme="https://www.lhsblog.cn/categories/Diary/"/>
    
    
      <category term="心得" scheme="https://www.lhsblog.cn/tags/%E5%BF%83%E5%BE%97/"/>
    
      <category term="技术" scheme="https://www.lhsblog.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="https://www.lhsblog.cn/2018/07/28/The%20first%20one/"/>
    <id>https://www.lhsblog.cn/2018/07/28/The first one/</id>
    <published>2018-07-28T09:38:00.000Z</published>
    <updated>2018-08-01T05:33:43.125Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;  这算是我刚刚对hexo的一个基本的入门吧，俗话说的好”九尺之台，起于垒土.”
        
      
    
    </summary>
    
      <category term="Diary" scheme="https://www.lhsblog.cn/categories/Diary/"/>
    
    
      <category term="心得" scheme="https://www.lhsblog.cn/tags/%E5%BF%83%E5%BE%97/"/>
    
      <category term="杂谈" scheme="https://www.lhsblog.cn/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
